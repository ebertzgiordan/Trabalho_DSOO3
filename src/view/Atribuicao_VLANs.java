/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package view;

import controller.PortaController;
import controller.PortaVlanController;
import controller.SwitchController;
import controller.VlanController;
import entity.Porta;
import entity.Switch;
import java.util.List;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ebert
 */
public class Atribuicao_VLANs extends javax.swing.JInternalFrame {

    /**
     * Creates new form Atribuicao_VLANs
     */
    public Atribuicao_VLANs() {
        initComponents();
        carregarSwitches();
        configurarComboTipoNaTabela();
        configurarEdicaoTipoDiretoNaTabela();
        preencherComboBoxTipo();
    }
    private List<Porta> portasAtuais;
    private Switch switchSelecionado;
    private final SwitchController switchController = new SwitchController();
    private final PortaController portaController = new PortaController();
    private final PortaVlanController portaVlanController = new PortaVlanController();
    private final VlanController vlanController = new VlanController();

    private void carregarSwitches() {
        try {
            jComboBox1.removeAllItems();
            for (Switch s : switchController.listarTodos()) {
                jComboBox1.addItem(s.getNome());
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar switches: " + e.getMessage());
        }
    }

    private void preencherComboBoxTipo() {
        jComboBox2.removeAllItems();
        jComboBox2.addItem("ACCESS");
        jComboBox2.addItem("TRUNK");
        jComboBox2.addItem("HYBRID");
    }

    private void configurarComboTipoNaTabela() {
        String[] tipos = {"ACCESS", "TRUNK", "HYBRID"};
        JComboBox<String> comboTipos = new JComboBox<>(tipos);
        jTable1.getColumnModel().getColumn(2).setCellEditor(new javax.swing.DefaultCellEditor(comboTipos));
    }

    private void configurarEdicaoTipoDiretoNaTabela() {
        jTable1.getModel().addTableModelListener(e -> {
            if (e.getColumn() == 2) { // coluna do tipo
                int linha = e.getFirstRow();
                try {
                    int portaId = (int) jTable1.getValueAt(linha, 0);
                    String novoTipo = (String) jTable1.getValueAt(linha, 2);
                    portaController.atualizarTipo(portaId, novoTipo);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, "Erro ao atualizar tipo: " + ex.getMessage());
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jButton4 = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        jLabel1.setText("Atribuição de VLANs");

        jLabel2.setText("Selecione o Switch:");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel3.setText("Selecione sua respectiva porta:");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Atribuir");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Remover");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Limpar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel4.setText("Digite a VLAN desejada:");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel5.setText("Tipo:");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButton4.setText("Atualizar Tipo");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addGap(18, 18, 18)
                                .addComponent(jButton4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton2)
                                .addGap(36, 36, 36)
                                .addComponent(jButton3))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextField1)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)))
                            .addComponent(jLabel5)
                            .addComponent(jLabel4)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(188, 188, 188)
                        .addComponent(jLabel1)))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton2)
                    .addComponent(jButton1)
                    .addComponent(jButton4))
                .addGap(53, 53, 53))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        // selecionar Switch
        try {
            String nomeSelecionado = (String) jComboBox1.getSelectedItem();
            if (nomeSelecionado == null) {
                return;
            }

            // Buscar objeto completo do switch
            for (Switch s : switchController.listarTodos()) {
                if (s.getNome().equals(nomeSelecionado)) {
                    switchSelecionado = s;
                    break;
                }
            }

            if (switchSelecionado != null) {
                carregarPortas();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar portas: " + e.getMessage());
        }
    }

    private void carregarPortas() throws Exception {
        portasAtuais = portaController.listarPorSwitch(switchSelecionado.getId());
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("ID Porta");
        modelo.addColumn("Número");
        modelo.addColumn("Tipo");
        modelo.addColumn("VLANs");

        for (Porta p : portasAtuais) {
            List<Integer> vlans = portaVlanController.listarVlansPorPorta(p.getId());
            modelo.addRow(new Object[]{
                p.getId(),
                p.getNumero(),
                p.getTipo(),
                vlans.toString().replaceAll("[\\[\\]]", "") // exibe como "10, 20"
            });
        }

        jTable1.setModel(modelo);
        jTable1.getColumnModel().getColumn(0).setMinWidth(0);  // Oculta ID da porta
        jTable1.getColumnModel().getColumn(0).setMaxWidth(0);

    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
        // vlan
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        // limpar
        jTextField1.setText("");
        jTable1.clearSelection();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int linha = jTable1.getSelectedRow();
        if (linha == -1) {
            JOptionPane.showMessageDialog(this, "Selecione uma porta.");
            return;
        }

        try {
            int portaId = (int) jTable1.getValueAt(linha, 0);
            String tipo = (String) jComboBox2.getSelectedItem();
            String entradaVlan = jTextField1.getText().trim();

            // Atualiza o tipo da porta no banco
            portaController.atualizarTipo(portaId, tipo);

            if (entradaVlan.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Digite a(s) VLAN(s).");
                return;
            }

            if (tipo.equalsIgnoreCase("HYBRID")) {
                String[] partes = entradaVlan.split(",");
                if (partes.length != 2) {
                    JOptionPane.showMessageDialog(this, "Para HYBRID, informe 2 VLANs separadas por vírgula (ex: 10,20)");
                    return;
                }

                int vlanUntagged = Integer.parseInt(partes[0].trim());
                int vlanTagged = Integer.parseInt(partes[1].trim());

                if (!vlanController.existeVlan(vlanUntagged) || !vlanController.existeVlan(vlanTagged)) {
                    JOptionPane.showMessageDialog(this, "Uma das VLANs não existe.");
                    return;
                }

                portaVlanController.atribuirVlan(portaId, vlanUntagged, "UNTAGGED");
                portaVlanController.atribuirVlan(portaId, vlanTagged, "TAGGED");

                JOptionPane.showMessageDialog(this, "VLANs atribuídas para porta HYBRID.");

            } else if (tipo.equalsIgnoreCase("TRUNK")) {
                int vlanId = Integer.parseInt(entradaVlan);

                if (!vlanController.existeVlan(vlanId)) {
                    JOptionPane.showMessageDialog(this, "A VLAN " + vlanId + " não existe.");
                    return;
                }

                portaVlanController.atribuirVlan(portaId, vlanId, "UNTAGGED"); // Nativa
                JOptionPane.showMessageDialog(this, "VLAN atribuída como nativa (UNTAGGED) para TRUNK.");

            } else if (tipo.equalsIgnoreCase("ACCESS")) {
                int vlanId = Integer.parseInt(entradaVlan);

                if (!vlanController.existeVlan(vlanId)) {
                    JOptionPane.showMessageDialog(this, "A VLAN " + vlanId + " não existe.");
                    return;
                }

                portaVlanController.atribuirVlan(portaId, vlanId, "UNTAGGED");
                JOptionPane.showMessageDialog(this, "VLAN atribuída para porta ACCESS.");
            }

            carregarPortas();
            jTextField1.setText("");

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao atribuir VLAN: " + e.getMessage());
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        int linha = jTable1.getSelectedRow();
        if (linha == -1) {
            JOptionPane.showMessageDialog(this, "Selecione uma porta.");
            return;
        }

        try {
            int portaId = (int) jTable1.getValueAt(linha, 0);
            int idVlan = Integer.parseInt(jTextField1.getText().trim());

            portaVlanController.removerVlan(portaId, idVlan);
            JOptionPane.showMessageDialog(this, "VLAN removida com sucesso!");
            carregarPortas();
            jTextField1.setText("");

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao remover VLAN: " + e.getMessage());
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        int linha = jTable1.getSelectedRow();
        if (linha == -1) {
            JOptionPane.showMessageDialog(this, "Selecione uma porta.");
            return;
        }

        try {
            int portaId = (int) jTable1.getValueAt(linha, 0);
            String novoTipo = (String) jComboBox2.getSelectedItem();
            portaController.atualizarTipo(portaId, novoTipo);

            JOptionPane.showMessageDialog(this, "Tipo da porta atualizado para " + novoTipo + "!");
            carregarPortas();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao atualizar tipo: " + e.getMessage());
        }
    }//GEN-LAST:event_jButton4ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
